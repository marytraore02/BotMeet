// Import des modules n√©cessaires
const { spawn, fork } = require('child_process');
const os = require('os');
// On utilise 'launch' de puppeteer-stream pour s'assurer que le navigateur est correctement configur√© pour le streaming
const { launch, getStream, wss } = require("puppeteer-stream"); 
const fs = require("fs");
const axios = require('axios'); // NOUVEAU
const FormData = require('form-data'); // NOUVEAU

// --- NOUVELLE CONFIGURATION PUPPETEER-EXTRA ---
const puppeteer = require('puppeteer-extra');

// Charger les plugins
const StealthPlugin = require('puppeteer-extra-plugin-stealth');
const AdblockerPlugin = require('puppeteer-extra-plugin-adblocker');
const AnonymizeUAPlugin = require('puppeteer-extra-plugin-anonymize-ua');

// Utiliser les plugins
puppeteer.use(StealthPlugin());
puppeteer.use(AdblockerPlugin({ blockTrackers: true })); // Bloque les pubs et les trackers
puppeteer.use(AnonymizeUAPlugin()); // Fournit un User-Agent r√©aliste



// --- Configuration ---
const AGENT_NAME = "Agent-IA"; // Nom utilis√© si la connexion est anonyme
const MEETING_LINK = process.argv[2]; // R√©cup√®re le lien de la r√©union depuis les arguments de la ligne de commande
// const MEETING_LINK = process.env.MEETING_LINK;
// Pour la connexion, utilisez des variables d'environnement pour la s√©curit√©
const GOOGLE_EMAIL = process.env.GOOGLE_EMAIL; 
const GOOGLE_PASSWORD = process.env.GOOGLE_PASSWORD;

const RECORDING_DURATION_MS = 22000; // Dur√©e de l 'enregistrement en millisecondes (ici 60s)
const MAX_RETRIES = 3; // Nombre maximum de tentatives de connexion
const RETRY_DELAY_MS = 5000; // D√©lai entre les tentatives (5 secondes)

// V√©rification de la pr√©sence du lien de la r√©union
if (!MEETING_LINK) {
  console.error('‚ùå Erreur : Veuillez fournir un lien de r√©union Google Meet.');
  console.log('Usage: node join-meet.js <lien_de_la_reunion>');
  process.exit(1);
}

let ffmpegProcess; // Pour garder une r√©f√©rence au processus FFmpeg

function startRecordingWithFFmpeg(fileName) {
    console.log(`üî¥ D√©marrage de l'enregistrement avec FFmpeg... Fichier : ${fileName}`);

    // La commande FFmpeg d√©pend de votre syst√®me d'exploitation
    let ffmpegArgs = [];
    const platform = os.platform();

    if (platform === 'win32') {
        // Pour Windows, il faut trouver le nom de votre p√©riph√©rique de sortie audio.
        // Ex√©cutez cette commande dans votre terminal pour lister vos p√©riph√©riques :
        // ffmpeg -list_devices true -f dshow -i dummy
        // Remplacez "Haut-parleurs (Realtek High Definition Audio)" par le v√¥tre.
        ffmpegArgs = [
            '-f', 'dshow',
            // '-i', 'audio=Haut-parleurs (Realtek High Definition Audio)', // <== √Ä CHANGER
            '-i', 'audio=Stereo Mix (Realtek(R) Audio)',
            // '-i', 'audio=R√©seau de microphones (Technologie Intel¬Æ Smart Sound pour microphones num√©riques)',
            '-acodec', 'libmp3lame', // Enregistre en MP3
            '-q:a', '2', // Bonne qualit√©
            // '-acodec', 'libopus',
            // MODIFI√â : Sp√©cifie le d√©bit pour la qualit√© (96k est excellent pour la voix)
            // '-b:a', '96k', 
            fileName
            // fileName.replace('.webm', '.mp3') // Sauvegarde en .mp3
        ];
    } else if (platform === 'darwin') { // macOS
         // Sur Mac, il faut souvent un outil comme BlackHole pour cr√©er un p√©riph√©rique de sortie virtuel.
         // Une fois BlackHole install√©, vous trouverez son index avec : ffmpeg -f avfoundation -list_devices true -i ""
        ffmpegArgs = [
            '-f', 'avfoundation',
            '-i', ':1', // <== CHANGER l'index pour celui de BlackHole
            '-acodec', 'libmp3lame',
            fileName
        ];
    } else { // Linux
        ffmpegArgs = [
            '-f', 'pulse',
            '-i', 'default', // Capture la sortie audio par d√©faut
            '-acodec', 'libmp3lame',
            // '-acodec', 'libopus',
            // '-b:a', '96k',
            // fileName.replace('.webm', '.mp3')
            fileName
        ];
    }

    ffmpegProcess = spawn('ffmpeg', ffmpegArgs);

    ffmpegProcess.stdout.on('data', (data) => console.log(`ffmpeg: ${data}`));
    ffmpegProcess.stderr.on('data', (data) => console.error(`ffmpeg stderr: ${data.toString()}`));
    // ffmpegProcess.on('close', (code) => console.log(`FFmpeg s'est termin√© avec le code ${code}`));
}

function stopRecordingWithFFmpeg() {
    return new Promise((resolve) => {
        if (!ffmpegProcess) return resolve();
        
        ffmpegProcess.on('close', (code) => {
            console.log(`‚úÖ Enregistrement FFmpeg termin√© proprement avec le code ${code}.`);
            resolve();
        });
        console.log('Signal d\'arr√™t envoy√© √† FFmpeg...');
        ffmpegProcess.kill('SIGINT');
    });
}



(async () => {
    // --- D√©tection du chemin de Google Chrome ---
    let chromePath = '';
    const platform = os.platform();
    if (platform === 'darwin') { // macOS
        chromePath = '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome';
    } else if (platform === 'win32') { // Windows
        // Essaye plusieurs chemins courants pour Chrome sur Windows
        const paths = [
            // 'C:/Program Files/Google/Chrome/Application/chrome.exe',
            'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
            'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe',
            `${os.homedir()}\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe`
        ];
        chromePath = paths.find(p => fs.existsSync(p));
    } else if (platform === 'linux') { // Linux
        chromePath = '/usr/bin/google-chrome';
    }

    // V√©rifie si le chemin trouv√© est valide
    if (chromePath && !fs.existsSync(chromePath)) {
        console.warn(`‚ö†Ô∏è Chrome non trouv√© √† l'emplacement : ${chromePath}`);
        chromePath = null; // R√©initialise pour laisser Puppeteer choisir
    }
    
    console.log(`üöÄ Lancement du navigateur... (${chromePath ? 'Google Chrome' : 'Chromium par d√©faut'})`);
    
    let browser; // D√©clarer le navigateur ici pour qu'il soit accessible dans le catch final
    
    try {
        // Utilisation de 'launch' de puppeteer-stream
        browser = await launch({
            executablePath: chromePath, // Utilise le chemin d√©tect√© ou null
            // CORRECTION: Utilisation du nouveau mode headless qui supporte mieux les extensions et les media streams
            headless: false, 
            // headless: "new",
            args: [
            //   '--no-sandbox', // Souvent n√©cessaire sur les serveurs Linux ou dans les conteneurs Docker pour que Chrome puisse se lancer
            //   '--disable-setuid-sandbox',
            //   '--disable-gpu', //  D√©sactiver le GPU Peut am√©liorer la stabilit√© dans certains environnements
              '--window-size=1920,1080', // D√©finir une taille de fen√™tre est plus fiable
            //   // Les arguments 'use-fake-ui' pour la capture de m√©dia en mode headless
            //   '--use-fake-ui-for-media-stream',
            //   '--use-fake-device-for-media-stream',
            //   '--autoplay-policy=no-user-gesture-required',


            //   '--start-fullscreen', // Le mode fullscreen n'est pas toujours n√©cessaire en headless
            //   '--disable-infobars', // Enl√®ve les barres d'information de Chrome
            ],
        });

        // --- Gestion proactive des permissions ---
        const context = browser.defaultBrowserContext();
        // L'URL doit √™tre valide pour overridePermissions
        const origin = new URL(MEETING_LINK).origin;
        await context.overridePermissions(origin, ['microphone', 'camera', 'notifications']);
        console.log(`‚úÖ Permissions accord√©es pour l'origine : ${origin}`);

        const page = await browser.newPage();
        // D√©finir un User-Agent pour para√Ætre moins comme un bot
        await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36');


        // Temps d'attente global pour √™tre plus robuste
        // Pour chaque action d'attente (comme waitForSelector), attends jusqu'√† 90 secondes avant d'abandonner."
        page.setDefaultTimeout(90000);

        // --- √âTAPE 1: AUTHENTIFICATION (Optionnelle) ---
        // if (GOOGLE_EMAIL && GOOGLE_PASSWORD) {
            console.log('üîí Tentative d\'authentification avec un compte Google...');
            await page.goto('https://accounts.google.com/');
            await page.waitForSelector('input[type="email"]');
            await page.type('input[type="email"]', 'marytra22@gmail.com');
            await page.click('#identifierNext');
            
            await page.waitForSelector('input[type="password"]', { visible: true });
            await page.type('input[type="password"]', 'waraWa.1');
            await page.click('#passwordNext');

            // console.log('... Attente de la page de mot de passe ou d\'une v√©rification...');
            // await page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 5000 }); // Timeout augment√© √† 60s

            // try {
            //     await page.waitForSelector('input[type="password"]', { visible: true, timeout: 5000 }); // Attendre le champ du mot de passe
            //     await page.type('input[type="password"]', GOOGLE_PASSWORD);

            //     // Utiliser un s√©lecteur plus robuste pour le bouton "Suivant"
            //     const passwordNextButton = await page.waitForSelector('::-p-xpath(//button[.//span[contains(text(), "Suivant")]])');
            //     await passwordNextButton.click();

            //     // Attendre la fin de la navigation apr√®s la connexion
            //     await page.waitForNavigation({ waitUntil: 'networkidle2' });
                
            // } catch(e) {
            //     console.error("Impossible de trouver le champ du mot de passe. Une page de v√©rification a probablement √©t√© pr√©sent√©e.");
            //     await page.screenshot({ path: 'erreur_verification_google.png' });
            //     throw new Error("√âchec √† l'√©tape de v√©rification de Google. Utilisez un Mot de Passe d'Application.");
            // }
            
            // Attendre la fin de la navigation apr√®s la connexion
            await page.waitForNavigation({ waitUntil: 'networkidle2' });

            // GERER LA DEMANDE D'AUTHENTIFICATION PAR WINDOWS
            try {
                const notNowButton = await page.waitForSelector('button[jsname="V67aGc"]', { timeout: 2000 });
                if (notNowButton) {
                    console.log('üñ±Ô∏è Clic sur "Pas maintenant" (Cl√©s d\'acc√®s).');
                    await notNowButton.click();
                    await page.waitForNavigation({ waitUntil: 'networkidle2' });
                }
            } catch (error) {
                console.log('‚úÖ L\'√©cran "Cl√©s d\'acc√®s" n\'est pas apparu, on continue.');
            }
            console.log('üîê Authentification termin√©e.');
        // } else {    
        //     console.log('üë§ Connexion en tant qu\'invit√© anonyme.');
        // }

        // --- √âTAPE 2: BOUCLE DE CONNEXION √Ä LA R√âUNION AVEC R√âESSAIS ---
        let connected = false;
        for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
            console.log(`\n‚ñ∂Ô∏è Tentative de connexion n¬∞${attempt}/${MAX_RETRIES}...`);
            try {
                await page.goto(MEETING_LINK, { waitUntil: 'networkidle2', timeout: 10000  });
                console.log('   - üëã Pr√©paration de la page...');
                await new Promise(resolve => setTimeout(resolve, 6000)); // Attente pour que la page se stabilise

                // --- NOUVEAU : GESTION DE LA POP-UP "NOTIFICATIONS" ---
                try {
                    const notificationPopupXPath = "//button[.//span[contains(text(), 'Pas maintenant')]]";
                    const notNowButton = await page.waitForSelector(`::-p-xpath(${notificationPopupXPath})`, { timeout: 5000 });
                    console.log('   - üñ±Ô∏è D√©sactiv√© Pop-up de notifications si d√©tect√©e.');
                    await notNowButton.click();
                } catch (e) {
                    console.log('   - ‚úÖ La pop-up de notifications n\'est pas apparue, on continue.');
                }

                // D√©sactiver micro et cam√©ra avant de rejoindre
                await page.evaluate(() => {
                    const buttons = document.querySelectorAll('div[role="button"]');
                    buttons.forEach(button => {
                        const label = button.getAttribute('aria-label');
                        if (label && (label.toLowerCase().includes('d√©sactiver le micro') || label.toLowerCase().includes('turn off microphone'))) {
                            console.log('   - üé§ Microphone est activ√©. Tentative de d√©sactivation...');
                            button.click();
                            console.log('   - ‚úÖ Microphone d√©sactiv√©.');
                        }
                        if (label && (label.toLowerCase().includes('d√©sactiver la cam√©ra') || label.toLowerCase().includes('turn off camera'))) {
                            console.log('   - üìπ La cam√©ra est activ√©e. Tentative de d√©sactivation...');
                            button.click();
                            console.log('   - ‚úÖ Cam√©ra d√©sactiv√©e.');
                        }
                    });
                });
                // console.log('üé§ & üìπ Tentative de d√©sactivation du micro et de la cam√©ra.');

                // G√©rer le cas de l'utilisateur anonyme
                try {
                    const nameInput = await page.waitForSelector('input[placeholder="Votre nom"]', { timeout: 3000 });
                    console.log(`üë§ Inscription du nom : ${AGENT_NAME}`);
                    await nameInput.type(AGENT_NAME);
                } catch (e) {
                    console.log("Champ de nom non trouv√©, l'utilisateur est probablement connect√©.");
                }

                // --- NOUVEAU : GESTION DU POP-UP "POURSUIVEZ L'APPEL ICI" ---
                try {
                    // On cherche un bouton qui contient le texte "OK"
                    const continueCallXPath = "//button[.//span[contains(text(), 'OK')]]";
                    const okButton = await page.waitForSelector(`::-p-xpath(${continueCallXPath})`, { timeout: 5000 });
                    console.log('   - üñ±Ô∏è Pop-up "Poursuivez l\'appel ici" d√©tect√©. Clic sur "OK".');
                    await okButton.click();
                    // On attend un peu que l'interface se mette √† jour apr√®s le clic
                    await new Promise(resolve => setTimeout(resolve, 2000)); 
                } catch (e) {
                    console.log('   - üëç Le pop-up "Poursuivez l\'appel ici" n\'est pas apparu.');
                }

                // Cliquer sur "Participer"
                const joinButton = await page.waitForSelector('::-p-xpath(//button[.//span[contains(text(), "Participer")] or .//span[contains(text(), "Passer")]])', { timeout: 3000 });
                await joinButton.click();

                // V√©rifier que la connexion est r√©ussie en cherchant le bouton pour quitter
                await page.waitForSelector('button[aria-label*="Quitter l\'appel"], button[aria-label*="Leave call"]', { timeout: 8000 });
                console.log('‚úÖ Connexion √† la r√©union r√©ussie !');
                connected = true;
                break; // Sortir de la boucle

            } catch (error) {
                console.error(` ¬† - ‚ùå √âchec de la tentative n¬∞${attempt}: ${error.message.split('\n')[0]}`);
                await page.screenshot({ path: `erreur_tentative_${attempt}.png` });
                if (attempt < MAX_RETRIES) {
                    console.log(` ¬† - Attente de ${RETRY_DELAY_MS / 1000} secondes avant la prochaine tentative...`);
                    await new Promise(resolve => setTimeout(resolve, RETRY_DELAY_MS));
                }
            }
        }

        if (!connected) {
            throw new Error(`Impossible de se connecter √† la r√©union apr√®s ${MAX_RETRIES} tentatives.`);
        }

        // --- √âTAPE DE STABILISATION AVANT ENREGISTREMENT ---
        console.log('... Attente de stabilisation avant enregistrement (5s)...');
        await new Promise(resolve => setTimeout(resolve, 5000));
        console.log('‚úÖ Page stabilis√©e, tentative de capture du flux audio.');

        // const fileName = `enregistrement-${Date.now()}.webm`; // Le nom sera chang√© en .mp3 par la fonction
        const recordingsFolder = 'recordings'; // Nom du dossier mapp√© dans docker-compose
        if (!fs.existsSync(recordingsFolder)) {
            fs.mkdirSync(recordingsFolder);
        }
        // const fileName = `${recordingsFolder}/enregistrement-${Date.now()}.webm`; // MODIFI√â
        const filePath = `${recordingsFolder}/enregistrement-${Date.now()}.mp3`; // MODIFI√â
        startRecordingWithFFmpeg(filePath);
        
        console.log(`üîä Enregistrement en cours pour ${RECORDING_DURATION_MS / 1000}s...`);

        // Attendre la fin de la dur√©e d'enregistrement
        await new Promise(resolve => setTimeout(resolve, RECORDING_DURATION_MS));

        stopRecordingWithFFmpeg();
        console.log(`Le fichier sera sauvegard√© sous "${filePath}".`);
        
        // Laisser un peu de temps √† FFmpeg pour finaliser le fichier
        // await new Promise(resolve => setTimeout(resolve, 2000)); 

        // Envoyez le fichier .mp3 √† votre backend
        // sendAudioForTranscription(fileName);

        // NOUVEL APPEL : Lancement du worker en arri√®re-plan
        console.log('üöÄ Lancement du worker en arri√®re-plan pour l\'envoi du fichier...');
        const worker = fork('./upload-worker.js', [filePath], {
            detached: true, // D√©tache le processus enfant du parent
            stdio: 'ignore' // Ignore les entr√©es/sorties pour permettre au parent de se fermer
        });
        worker.unref(); // Permet au script parent de se terminer ind√©pendamment de l'enfant

        // Le script principal peut maintenant se terminer imm√©diatement
        console.log("üëã Le script principal a termin√© sa t√¢che. Le worker continue en arri√®re-plan.");


        // Quitter l'appel proprement
        try {
            const leaveButton = await page.$('button[aria-label*="Quitter l\'appel"]');
            if (leaveButton) {
                await leaveButton.click();
                console.log("üëã Appel quitt√©.");
            }
        } catch (e) {
            console.warn("Impossible de quitter l'appel.");
        }

        await browser.close();
        if (wss) (await wss).close();
        console.log("Navigateur et serveur websocket ferm√©s.");
        process.exit(0);

    } catch (error) {
        console.error('‚ùå Une erreur critique est survenue :', error.message);
        // AM√âLIORATION: Gestion d'erreur plus robuste pour √©viter le "TargetCloseError"
        if (browser) {
            try {
                const pages = await browser.pages();
                if (pages.length > 0) {
                    await pages[0].screenshot({ path: 'erreur_finale.png' });
                    console.log('Une capture d\'√©cran "erreur_finale.png" a √©t√© enregistr√©e.');
                }
            } catch (screenshotError) {
                console.error("Impossible de prendre une capture d'√©cran:", screenshotError.message);
            }
            await browser.close();
            console.log("Navigateur ferm√© apr√®s erreur.");
        }
        if (wss) {
            try {
                (await wss).close();
                console.log("Serveur websocket ferm√© apr√®s erreur.");
            } catch (wssError) {
                console.error("Impossible de fermer le serveur websocket:", wssError.message);
            }
        }
        process.exit(1);
    }
})();
